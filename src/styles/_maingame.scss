@use "./config" as *;

.main_wrapper {
  color: $clr_fnt;
  font-size: 2rem;

  @include media(max, 400px) {
    font-size: 1.5rem;
  }

  svg {
    pointer-events: none;
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .loading_wrapper {
    @include overlayPos(fixed);
    z-index: -1;
    backdrop-filter: blur(20px);
    @include flex(center, center);
    opacity: 0;
    transition: all ease $trans_mid;

    &.loading_failed {
      @include flex(center, center, column);
      gap: 15px;
      font-family: $fnt_spc;
      letter-spacing: 0.2rem;
      color: #ff7575;
    }

    &.active {
      opacity: 1;
      z-index: 5;
    }

    a {
      font-size: 1.5rem;
      letter-spacing: 0.1rem;
      box-shadow: 2px 2px 5px #000714, -2px -2px 5px #003083b5;
      padding: 5px 20px;
      border-radius: 5px;
      background: linear-gradient(120deg, #003083b5, #000714);
      font-family: $fnt_spc;
      color: $clr_fnt;

      &:not(&:disabled):active {
        background: linear-gradient(-120deg, #003083b5, #000714);
        box-shadow: inset 2px 2px 5px #000714, inset -2px -2px 5px #003083b5;
      }
    }
  }

  .navsect {
    @include flex(space-between, center, row-reverse);
    padding-block: 10px;
    backdrop-filter: blur(20px);
    padding-inline: 20px;

    .right_side {
      @include flex(flex-end, center);
      gap: 10px;

      @include media(max, 400px) {
        gap: 0px;
      }

      button {
        padding: 5px;
        opacity: 0.5;
        transition: all ease $trans_fast;

        &:disabled {
          cursor: not-allowed;
        }

        &:not(&:disabled):hover {
          opacity: 1;
        }

        &:not(&:disabled):active {
          scale: 0.9;
        }
      }

      .avi_wrapper {
        aspect-ratio: 1/1;
        width: 30px;
        border-radius: 50%;
        overflow: hidden;
        position: relative;

        @include media(max, 400px) {
          width: 25px;
        }
      }
    }

    .left_side {
      @include flex(flex-start, center);
      gap: 20px;

      .saving_icon {
        font-size: 2rem;
        opacity: 0;

        &.active {
          opacity: 1;
        }

        svg {
          animation: spinAnim 1.5s linear infinite;
        }
      }
    }
  }

  main {
    position: relative;
    height: calc(100vh - 54px);
    perspective: 10000px;
    transform-style: preserve-3d;
    --cube_width: 300px;

    @include media(max, 500px) {
      --cube_width: 60vw;
    }

    &.hide {
      visibility: hidden;
    }

    @include media(max, 400px) {
      height: calc(100vh - 48.2px);
    }

    .cube_view {
      --cube_dim: 13px;
      width: 30%;
      height: var(--cube_dim);
      margin-inline: auto;
      transform: translateY(8vh);
      position: relative;
      @include flex(center, center);
      gap: 10px;
      min-width: fit-content;
      max-width: calc(var(--cube_width) - 10px);

      .view_cube {
        transform-style: preserve-3d;
        aspect-ratio: 1/1;
        height: 100%;

        &.active {
          .face,
          .left,
          .bottom,
          .up,
          .right {
            filter: grayscale(0);
          }
        }

        &:hover {
          .face,
          .left,
          .bottom,
          .up,
          .right {
            filter: grayscale(0);
            scale: 1.3;
          }
        }

        &:not(&.active):active {
          scale: 0.9;
        }

        &.ufr {
          transform: rotateY(-20deg) rotateX(-20deg);
        }

        &.ufl {
          transform: rotateY(20deg) rotateX(-20deg);
        }

        &.bfr {
          transform: rotateY(-20deg) rotateX(20deg);
        }

        &.bfl {
          transform: rotateY(20deg) rotateX(20deg);
        }

        &::before {
          content: "";
          @include overlayPos(absolute);
          background-color: brown;
          transform: rotateY(180deg) translateZ(calc(var(--cube_dim) / 2));
        }

        .face,
        .left,
        .bottom,
        .up,
        .right {
          @include overlayPos(absolute);
          transition: all ease $trans_mid;
          filter: grayscale(1);
        }

        .face {
          transform: translateZ(calc(var(--cube_dim) / 2));
          background-color: white;
        }

        .up {
          transform: rotateX(90deg) translateZ(calc(var(--cube_dim) / 2));
          background-color: red;
        }

        .right {
          transform: rotateY(90deg) translateZ(calc(var(--cube_dim) / 2));
          background-color: green;
        }

        .left {
          transform: rotateY(-90deg) translateZ(calc(var(--cube_dim) / 2));
          background-color: blue;
        }

        .bottom {
          transform: rotateX(-90deg) translateZ(calc(var(--cube_dim) / 2));
          background-color: orange;
        }
      }
    }

    .cube {
      @include position(absolute, left, top, 50%, 50%);
      width: var(--cube_width);
      aspect-ratio: 1/1;
      z-index: -1;
      opacity: 0;
      transition: transform ease $trans_mid;

      &.active {
        z-index: 1;
        opacity: 1;
      }

      &.anim {
        animation: rotateCube 5s linear infinite;
      }

      .box {
        position: relative;
        background-color: #fff;
        width: 100%;
        @include flex(center, center);
        color: #000;
        outline: 1px solid #000c21;
        z-index: 1;
        border-radius: 5px;
        pointer-events: none;

        &::before {
          content: "";
          @include position(absolute, left, top, 50%, 50%);
          @include biTranslate(-50%, -50%);
          width: 90%;
          aspect-ratio: 1/1;
          z-index: -1;
          background-color: var(--box_clr);
          border-radius: 3px;
        }
      }
    }

    .vert_cube {
      transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-20deg);
      transform-style: preserve-3d;

      &:before,
      &:after {
        content: "";
        @include overlayPos(absolute);
        transform-style: preserve-3d;
      }

      &::before {
        background-color: #fff;
        transform: rotateY(90deg)
          translateZ(
            calc(calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35))
          );
      }

      &::after {
        background-color: #fff;
        transform: rotateY(-90deg)
          translateZ(
            calc(
              calc(calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35))
            )
          );
      }

      .sub_cube {
        width: 33.3%;
        height: 100%;
        position: absolute;
        top: 0;
        transform-style: preserve-3d;
        transition: all ease $trans_slow;

        &.right_cube {
          right: 0;

          &:before {
            content: "";
            @include position(absolute, left, top, 50%, 50%);
            transform: translate(-50%, -50%) rotateY(-90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
            background-color: #fff;
            width: var(--cube_width);
            height: 100%;
          }
        }

        &.center_cube {
          left: 50%;
          @include uniTranslate(X, -50%);
        }

        &.left_cube {
          left: 0;

          &:before {
            content: "";
            @include position(absolute, left, top, 50%, 50%);
            transform: translate(-50%, -50%) rotateY(90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
            background-color: #fff;
            width: var(--cube_width);
            height: 100%;
          }
        }

        .face,
        .back,
        .top,
        .bottom {
          display: grid;
          grid-template-columns: 1fr;
          @include overlayPos(absolute);
        }

        .right,
        .left {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          width: var(--cube_width);
          height: 100%;
        }

        .face {
          transform: translateZ(calc(var(--cube_width) / 2));
        }

        .back {
          transform: rotateY(180deg) translateZ(calc(var(--cube_width) / 2));
        }

        .top {
          transform: rotateX(90deg) translateZ(calc(var(--cube_width) / 2));
        }

        .bottom {
          transform: rotateX(90deg) translateZ(calc(-1 * var(--cube_width) / 2));
          transform-style: preserve-3d;

          .box {
            transform: rotateY(180deg) rotateZ(180deg);
          }
        }

        .right {
          transform: translateX(
              calc(
                -1 * calc(calc(var(--cube_width) / 2) -
                      calc(var(--cube_width) * 0.33))
              )
            )
            rotateY(90deg);
        }

        .left {
          transform: rotateY(90deg)
            translateZ(calc(-1 * calc(var(--cube_width) / 2)));

          .box {
            transform: rotateY(180deg);
          }
        }
      }
    }

    .hor_cube {
      transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-20deg);
      transform-style: preserve-3d;

      .sub_cube {
        width: 100%;
        height: 33.3%;
        position: absolute;
        left: 0;
        transform-style: preserve-3d;
        transition: all ease $trans_slow;

        &.top_cube {
          top: 0;

          &:before {
            content: "";
            @include position(absolute, left, top, 0, 50%);
            width: 100%;
            aspect-ratio: 1/1;
            background-color: #fff;
            transform: translateY(-50%) rotateX(-90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }
        }

        &.mid_cube {
          top: 50%;
          @include uniTranslate(Y, -50%);

          &:after,
          &:before {
            content: "";
            @include position(absolute, left, top, 0, 50%);
            width: 100%;
            aspect-ratio: 1/1;
            background-color: #fff;
          }

          &:before {
            transform: translateY(-50%) rotateX(90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }

          &:after {
            transform: translateY(-50%) rotateX(-90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }
        }

        &.bottom_cube {
          bottom: 0;

          &:before {
            content: "";
            @include position(absolute, left, top, 0, 50%);
            width: 100%;
            aspect-ratio: 1/1;
            background-color: #fff;
            transform: translateY(-50%) rotateX(90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }
        }

        .face,
        .back,
        .left,
        .right {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          @include overlayPos(absolute);
        }

        .top,
        .bottom {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          @include position(absolute, left, top, 0, 0);
          width: 100%;
          aspect-ratio: 1/1;
        }

        .face {
          transform: translateZ(calc(var(--cube_width) / 2));
        }

        .back {
          transform: translateZ(calc(-1 * calc(var(--cube_width) / 2)));

          .box {
            transform: rotateY(180deg);
          }
        }

        .right {
          transform: rotateY(90deg) translateZ(calc(var(--cube_width) / 2));
        }

        .left {
          transform: rotateY(90deg)
            translateZ(calc(-1 * calc(var(--cube_width) / 2)));

          .box {
            transform: rotateY(180deg);
          }
        }

        .top {
          transform: rotateX(90deg) translateZ(calc(var(--cube_width) / 2));
        }

        .bottom {
          transform: rotateX(90deg)
            translateZ(
              calc(calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.33))
            );

          .box {
            transform: rotateY(180deg) rotateZ(180deg);
          }
        }
      }
    }

    .rotate_btn {
      @include position(absolute, left, bottom, 50%, 12vh);
      @include uniTranslate(X, -50%);
      background-color: #00173f;
      padding: 5px;
      border-radius: 3px;
      opacity: 0.5;
      transition: opacity ease $trans_fast;

      &:hover {
        opacity: 1;
      }

      &:active {
        scale: 0.9;
      }

      svg {
        display: block;
        pointer-events: none;
      }
    }

    .controls_wrapper {
      @include position(absolute, left, top, 50%, 50%);
      @include biTranslate(-50%, -50%);
      width: calc(1.2 * var(--cube_width));
      aspect-ratio: 1/1.8;

      .pos_wrapper {
        position: absolute;
        width: 30px;
        height: 30px;

        &.top_right {
          top: 5%;
          right: 0;

          .top {
            top: 0;
            right: 0;
            transform: translateY(-70%);
          }

          .right {
            bottom: 0;
            right: 0;
            transform: translateX(100%);
          }
        }

        &.top_left {
          top: 5%;
          left: 0;

          .top {
            top: 0;
            left: 0;
            transform: translateY(-70%);
          }

          .left {
            bottom: 0;
            left: 0;
            transform: translateX(-100%);
          }
        }

        &.bottom_right {
          bottom: 5%;
          right: 0;

          .bottom {
            top: 0;
            right: 0;
            transform: translateY(70%);
          }

          .right {
            bottom: 0;
            right: 0;
            transform: translateX(100%);
          }
        }

        &.bottom_left {
          bottom: 5%;
          left: 0;

          .bottom {
            top: 0;
            right: 0;
            transform: translateY(70%);
          }

          .left {
            bottom: 0;
            right: 0;
            transform: translateX(-100%);
          }
        }

        .pos_btn {
          cursor: pointer;
          position: absolute;
          font-size: 1.8rem;
          backdrop-filter: 10px;
          padding: 3px;
          background-color: #00173f;
          border-radius: 5px;

          &:active {
            scale: 0.9;
          }
        }
      }
    }

    .swipe_cube {
      z-index: 5;
      width: var(--cube_width);
      aspect-ratio: 1/1;
      @include position(absolute, left, top, 50%, 50%);
      transform: translate(-50%, -50%);
      transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-20deg);
      transform-style: preserve-3d;
      transition: transform ease $trans_mid;

      &.hide {
        z-index: -1;
        pointer-events: none;
        opacity: 0;
      }

      .face {
        display: grid;
        grid-template-columns: 1fr;
        width: var(--cube_width);
        height: 100%;
        transform: translateZ(calc((var(--cube_width) / 2)));

        .row {
          @include flex(center, center);

          &.double {
            justify-content: space-between;
          }

          .rot_point {
            aspect-ratio: 1/1;
            width: calc(var(--cube_width) / 3);
            opacity: 0.3;
            cursor: auto;
            color: #000;
            transition: opacity ease $trans_fast;
            cursor: pointer;

            &:hover {
              opacity: 1;
            }
          }
        }
      }
    }
  }

  .complete_wrapper {
    @include overlayPos(fixed);
    backdrop-filter: blur(10px);
    background-color: #00000006;
    @include flex(center, center);
    z-index: -1;
    opacity: 0;
    pointer-events: none;
    scale: 0.5;
    transition: opacity ease $trans_mid, scale ease $trans_mid;

    &.active {
      z-index: 1;
      opacity: 1;
      pointer-events: auto;
      scale: 1;
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.5;
      @include overlayPos(absolute);
    }
  }
}

@keyframes rotateCube {
  0% {
    transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-20deg);
  }
  50% {
    transform: translate(-50%, -50%) rotateY(340deg) rotateX(-20deg);
  }
  100% {
    transform: translate(-50%, -50%) rotateY(340deg) rotateX(340deg);
  }
}

@keyframes spinAnim {
  from {
    rotate: 0deg;
  }
  to {
    rotate: 360deg;
  }
}
