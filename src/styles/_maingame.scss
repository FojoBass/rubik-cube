@use "./config" as *;

.main_wrapper {
  color: $clr_fnt;
  font-size: 2rem;

  @include media(max, 400px) {
    font-size: 1.5rem;
  }

  svg {
    pointer-events: none;
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .navsect {
    @include flex(space-between, center, row-reverse);
    padding-block: 10px;
    backdrop-filter: blur(20px);
    padding-inline: 20px;

    .right_side {
      @include flex(flex-end, center);
      gap: 10px;

      @include media(max, 400px) {
        gap: 0px;
      }

      button {
        padding: 5px;
        opacity: 0.5;
        transition: all ease $trans_fast;

        &:hover {
          opacity: 1;
        }
      }

      .avi_wrapper {
        aspect-ratio: 1/1;
        width: 30px;
        border-radius: 50%;
        overflow: hidden;

        @include media(max, 400px) {
          width: 25px;
        }
      }
    }
  }

  main {
    position: relative;
    height: calc(100vh - 54px);
    perspective: 10000px;
    transform-style: preserve-3d;

    @include media(max, 400px) {
      height: calc(100vh - 48.2px);
    }

    .cube {
      --cube_width: 300px;
      @include position(absolute, left, top, 50%, 50%);
      width: var(--cube_width);
      aspect-ratio: 1/1;
      z-index: -1;
      opacity: 0;

      &.active {
        z-index: 1;
        opacity: 1;
      }

      @include media(max, 400px) {
        --cube_width: 85%;
      }

      .box {
        position: relative;
        background-color: #fff;
        width: 100%;
        @include flex(center, center);
        color: brown;
        outline: 1px solid #000c21;
        z-index: 1;
        border-radius: 5px;

        &::before {
          content: "";
          @include position(absolute, left, top, 50%, 50%);
          @include biTranslate(-50%, -50%);
          width: 90%;
          aspect-ratio: 1/1;
          z-index: -1;
        }
      }
    }

    .vert_cube {
      transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-20deg);
      // transition: all ease 3s;
      transform-style: preserve-3d;
      animation: verAnim 10s ease infinite;
      // display: none;

      &:before,
      &:after {
        content: "";
        @include overlayPos(absolute);
        transform-style: preserve-3d;
        // display: none;
      }

      &::before {
        background-color: #fff;
        transform: rotateY(90deg)
          translateZ(
            calc(calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35))
          );
      }

      &::after {
        background-color: #fff;
        transform: rotateY(-90deg)
          translateZ(
            calc(
              calc(calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35))
            )
          );
      }

      .sub_cube {
        width: 33.3%;
        height: 100%;
        position: absolute;
        top: 0;
        transform-style: preserve-3d;
        transition: all ease $trans_slow;

        &.right_cube {
          right: 0;
          transform: rotateX(45deg);
          animation: verRotateAnim 5s ease-in-out infinite;

          &:before {
            content: "";
            @include position(absolute, left, top, 50%, 50%);
            transform: translate(-50%, -50%) rotateY(-90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
            background-color: #fff;
            width: var(--cube_width);
            height: 100%;
          }
        }

        &.center_cube {
          left: 50%;
          @include uniTranslate(X, -50%);
        }

        &.left_cube {
          left: 0;
          transform: rotateX(45deg);
          animation: verRotateAnim 3s ease-in-out 0.5s infinite;

          &:before {
            content: "";
            @include position(absolute, left, top, 50%, 50%);
            transform: translate(-50%, -50%) rotateY(90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
            background-color: #fff;
            width: var(--cube_width);
            height: 100%;
          }
        }

        .face,
        .back,
        .top,
        .bottom {
          display: grid;
          grid-template-columns: 1fr;
          // gap: 2px;
          @include overlayPos(absolute);
        }

        .right,
        .left {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          // gap: 2px;
          width: var(--cube_width);
          height: 100%;
        }

        .face {
          transform: translateZ(calc(var(--cube_width) / 2));
        }

        .back {
          transform: rotateY(180deg) translateZ(calc(var(--cube_width) / 2));

          // .box {
          //   transform: rotate(180deg);
          // }
        }

        .top {
          transform: rotateX(90deg) translateZ(calc(var(--cube_width) / 2));
        }

        .bottom {
          transform: rotateX(90deg) translateZ(calc(-1 * var(--cube_width) / 2));
          transform-style: preserve-3d;

          .box {
            transform: rotateY(180deg) rotateZ(180deg);
          }
        }

        .right {
          transform: translateX(
              calc(
                -1 * calc(calc(var(--cube_width) / 2) -
                      calc(var(--cube_width) * 0.33))
              )
            )
            rotateY(90deg);
        }

        .left {
          transform: rotateY(90deg)
            translateZ(calc(-1 * calc(var(--cube_width) / 2)));

          .box {
            transform: rotateY(180deg);
          }
        }
      }
    }

    .hor_cube {
      transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-50deg);
      // transition: all ease 3s;
      transform-style: preserve-3d;
      animation: horAnim 10s linear infinite;

      .sub_cube {
        width: 100%;
        height: 33.3%;
        position: absolute;
        left: 0;
        transform-style: preserve-3d;
        transition: all ease $trans_slow;

        &.top_cube {
          top: 0;
          transform: rotateY(45deg);
          animation: horRotateAnim 3s linear infinite;

          &:before {
            content: "";
            @include position(absolute, left, top, 0, 50%);
            width: 100%;
            aspect-ratio: 1/1;
            background-color: #fff;
            transform: translateY(-50%) rotateX(-90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }
        }

        &.mid_cube {
          top: 50%;
          @include uniTranslate(Y, -50%);
          // display: none;

          &:after,
          &:before {
            content: "";
            @include position(absolute, left, top, 0, 50%);
            width: 100%;
            aspect-ratio: 1/1;
            background-color: #fff;
          }

          &:before {
            transform: translateY(-50%) rotateX(90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }

          &:after {
            transform: translateY(-50%) rotateX(-90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }
        }

        &.bottom_cube {
          bottom: 0;
          transform: rotateY(45deg);
          animation: horRotateAnim 5s linear 0.5s infinite;

          &:before {
            content: "";
            @include position(absolute, left, top, 0, 50%);
            width: 100%;
            aspect-ratio: 1/1;
            background-color: #fff;
            transform: translateY(-50%) rotateX(90deg)
              translateZ(
                calc(
                  calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.35)
                )
              );
          }
        }

        .face,
        .back,
        .left,
        .right {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          @include overlayPos(absolute);
        }

        .top,
        .bottom {
          display: grid;
          grid-template-columns: 1fr 1fr 1fr;
          @include position(absolute, left, top, 0, 0);
          width: 100%;
          aspect-ratio: 1/1;
        }

        .face {
          transform: translateZ(calc(var(--cube_width) / 2));
        }

        .back {
          transform: translateZ(calc(-1 * calc(var(--cube_width) / 2)));

          .box {
            transform: rotateY(180deg);
          }
        }

        .right {
          transform: rotateY(90deg) translateZ(calc(var(--cube_width) / 2));
        }

        .left {
          transform: rotateY(90deg)
            translateZ(calc(-1 * calc(var(--cube_width) / 2)));

          .box {
            transform: rotateY(180deg);
          }
        }

        .top {
          transform: rotateX(90deg) translateZ(calc(var(--cube_width) / 2));
        }

        .bottom {
          transform: rotateX(90deg)
            translateZ(
              calc(calc(var(--cube_width) / 2) - calc(var(--cube_width) * 0.33))
            );

          .box {
            transform: rotateY(180deg) rotateZ(180deg);
          }
        }
      }
    }
  }
}

@keyframes horAnim {
  from {
    transform: translate(-50%, -50%) rotateY(0deg) rotateX(60deg) rotateZ(0deg);
  }

  to {
    transform: translate(-50%, -50%) rotateY(360deg) rotateX(420deg)
      rotateZ(360deg);
  }
}

@keyframes horRotateAnim {
  from {
    transform: rotateY(45deg);
  }
  to {
    transform: rotateY(405deg);
  }
}

@keyframes verAnim {
  from {
    transform: translate(-50%, -50%) rotateY(-20deg) rotateX(-20deg)
      rotateZ(0deg);
  }

  to {
    transform: translate(-50%, -50%) rotateY(340deg) rotateX(340deg)
      rotateZ(360deg);
  }
}

@keyframes verRotateAnim {
  from {
    transform: rotateX(45deg);
  }
  to {
    transform: rotateX(405deg);
  }
}
